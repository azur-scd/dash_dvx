{"version":3,"sources":["webpack:///./src/lib/components/List.react.js"],"names":["List","props","id","dataSource","keyExpr","parentIdExpr","default_selected_row_keys","columns","autoExpandAll","pagingIsEnabled","defaultPageSize","pageSizeSelectorIsEnabled","allowedPageSizes","sortingMode","searchPanelIsEnabled","headerFilterIsEnabled","filterRowIsEnabled","columnChooserIsEnabled","selectionMode","selectionIsRecursive","selected_rows","setProps","e","data","component","getSelectedRowsData","map","x","onExporting","Component","defaultProps","defaultSelectedRowKeys","propTypes","PropTypes","string","array","isRequired","bool","number","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACN;AAGC;AAAA,IAEfA,IAAI;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAEvB,kBAAS;MACP,kBAAwV,IAAI,CAACC,KAAK;QAA1VC,EAAE,eAAFA,EAAE;QAAEC,UAAU,eAAVA,UAAU;QAAEC,OAAO,eAAPA,OAAO;QAAEC,YAAY,eAAZA,YAAY;QAAEC,yBAAyB,eAAzBA,yBAAyB;QAAEC,OAAO,eAAPA,OAAO;QAAEC,aAAa,eAAbA,aAAa;QAAEC,eAAe,eAAfA,eAAe;QAAEC,eAAe,eAAfA,eAAe;QAAEC,yBAAyB,eAAzBA,yBAAyB;QAAEC,gBAAgB,eAAhBA,gBAAgB;QAAEC,WAAW,eAAXA,WAAW;QAAEC,oBAAoB,eAApBA,oBAAoB;QAAEC,qBAAqB,eAArBA,qBAAqB;QAAEC,kBAAkB,eAAlBA,kBAAkB;QAAEC,sBAAsB,eAAtBA,sBAAsB;QAAEC,aAAa,eAAbA,aAAa;QAAEC,oBAAoB,eAApBA,oBAAoB;QAAEC,aAAa,eAAbA,aAAa;QAAEC,QAAQ,eAARA,QAAQ;MACnV,oBACE,2DAAC,iEAAQ;QACP,EAAE,EAAEnB,EAAG;QACP,UAAU,EAAEC,UAAW;QACvB,OAAO,EAAEC,OAAQ;QACjB,YAAY,EAAEC,YAAa;QAC3B,cAAc,EAAEE,OAAQ;QACxB,aAAa,EAAEC,aAAc;QAC7B,WAAW,EAAE,IAAK;QAClB,eAAe,EAAE,IAAK;QACtB,eAAe,EAAE,IAAK;QACtB,sBAAsB,EAAEF,yBAA0B;QAClD,yBAAyB,EAAEA,yBAA0B;QACrD,aAAa,EAAEc,aAAc;QAC7B,kBAAkB,EAAE,4BAACE,CAAC,EAAK;UACzB,IAAMC,IAAI,GAAGD,CAAC,CAACE,SAAS,CAACC,mBAAmB,CAACP,aAAa,CAAC;UAC3DG,QAAQ,CAAC;YAAED,aAAa,EAAEG;UAAK,CAAC,CAAC;UACjCF,QAAQ,CAAC;YAACf,yBAAyB,EAAEiB,IAAI,CAACG,GAAG,CAAC,UAAAC,CAAC;cAAA,OAAEA,CAAC,WAAIvB,OAAO,EAAG;YAAA;UAAC,CAAC,CAAC;QACrE,CAAE;QACF,WAAW,EAAE,IAAI,CAACwB;MAAY,gBAE9B,2DAAC,oEAAS;QACR,IAAI,EAAC;MAAU,EAAG,eACpB,2DAAC,iEAAM;QACL,OAAO,EAAEnB,eAAgB;QACzB,eAAe,EAAEC;MAAgB,EAAG,eACtC,2DAAC,gEAAK;QACJ,oBAAoB,EAAEC,yBAA0B;QAChD,gBAAgB,EAAEC,gBAAiB;QACnC,QAAQ,EAAE;MAAK,EAAG,eACpB,2DAAC,kEAAO;QAAC,IAAI,EAAEC;MAAY,EAAG,eAC9B,2DAAC,sEAAW;QAAC,OAAO,EAAEC,oBAAqB;QACzC,KAAK,EAAE,GAAI;QACX,WAAW,EAAC;MAAW,EAAG,eAC5B,2DAAC,uEAAY;QAAC,OAAO,EAAEC;MAAsB,EAAG,eAChD,2DAAC,oEAAS;QAAC,OAAO,EAAEC;MAAmB,EAAG,eAC1C,2DAAC,wEAAa;QAAC,OAAO,EAAEC;MAAuB,EAAG,eAClD,2DAAC,oEAAS;QACR,SAAS,EAAEE,oBAAqB;QAChC,IAAI,EAAC;MAAU,EACf,CACO;IAEf;EAAC;EAAA;AAAA,EA/C+BU,+CAAS;AAAlB;AAkDzB7B,IAAI,CAAC8B,YAAY,GAAG;EAAEtB,aAAa,EAAE,IAAI;EAAEC,eAAe,EAAE,IAAI;EAAEC,eAAe,EAAE,EAAE;EAAEC,yBAAyB,EAAE,KAAK;EAAEE,WAAW,EAAE,UAAU;EAAEC,oBAAoB,EAAE,IAAI;EAAEC,qBAAqB,EAAE,IAAI;EAAEC,kBAAkB,EAAE,IAAI;EAAEC,sBAAsB,EAAE,KAAK;EAAEC,aAAa,EAAE,YAAY;EAAEC,oBAAoB,EAAE,IAAI;EAAEC,aAAa,EAAE,EAAE;EAAEW,sBAAsB,EAAE,EAAE;EAAEzB,yBAAyB,EAAE;AAAG,CAAC;AAC3YN,IAAI,CAACgC,SAAS,GAAG;EACf;AACF;AACA;EACE9B,EAAE,EAAE+B,iDAAS,CAACC,MAAM;EACpB;AACF;AACA;EACE/B,UAAU,EAAE8B,iDAAS,CAACE,KAAK,CAACC,UAAU;EACtC;AACF;AACA;EACEhC,OAAO,EAAE6B,iDAAS,CAACC,MAAM,CAACE,UAAU;EACpC;AACF;AACA;EACE/B,YAAY,EAAE4B,iDAAS,CAACC,MAAM,CAACE,UAAU;EACvC;AACJ;AACA;EACKL,sBAAsB,EAAEE,iDAAS,CAACE,KAAK;EAC1C;AACF;AACA;EACG;AACH;AACA;AACA;AACA;AACA;EACE5B,OAAO,EAAE0B,iDAAS,CAACE,KAAK;EACxB;AACF;AACA;EACE3B,aAAa,EAAEyB,iDAAS,CAACI,IAAI;EAC7B;AACF;AACA;EACE5B,eAAe,EAAEwB,iDAAS,CAACI,IAAI;EAC/B;AACF;AACA;EACE3B,eAAe,EAAEuB,iDAAS,CAACK,MAAM;EACjC;AACF;AACA;EACE3B,yBAAyB,EAAEsB,iDAAS,CAACI,IAAI;EACzC;AACF;AACA;EACEzB,gBAAgB,EAAEqB,iDAAS,CAACE,KAAK;EACjC;AACF;AACA;EACEtB,WAAW,EAAEoB,iDAAS,CAACC,MAAM;EAC7B;AACF;AACA;EACEpB,oBAAoB,EAAEmB,iDAAS,CAACI,IAAI;EACpC;AACF;AACA;EACEtB,qBAAqB,EAAEkB,iDAAS,CAACI,IAAI;EACrC;AACF;AACA;EACErB,kBAAkB,EAAEiB,iDAAS,CAACI,IAAI;EAClC;AACF;AACA;EACEpB,sBAAsB,EAAEgB,iDAAS,CAACI,IAAI;EACrC;AACH;AACA;EACElB,oBAAoB,EAAEc,iDAAS,CAACI,IAAI;EACpC;AACF;AACA;EACEnB,aAAa,EAAEe,iDAAS,CAACC,MAAM;EAC/B;AACF;AACA;EACEd,aAAa,EAAEa,iDAAS,CAACE,KAAK;EAC9B;AACF;AACA;EACG7B,yBAAyB,EAAE2B,iDAAS,CAACE,KAAK;EAC3C;AACF;AACA;AACA;EACEd,QAAQ,EAAEY,iDAAS,CAACM;AACtB,CAAC,C","file":"149107f-main-wps-hmr.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TreeList, {\r\n  Scrolling, Paging, Pager, Sorting, FilterRow, HeaderFilter, SearchPanel, Selection, Export, ColumnChooser, Lookup\r\n} from 'devextreme-react/tree-list';\r\n\r\nexport default class List extends Component {\r\n\r\n  render() {\r\n    const { id, dataSource, keyExpr, parentIdExpr, default_selected_row_keys, columns, autoExpandAll, pagingIsEnabled, defaultPageSize, pageSizeSelectorIsEnabled, allowedPageSizes, sortingMode, searchPanelIsEnabled, headerFilterIsEnabled, filterRowIsEnabled, columnChooserIsEnabled, selectionMode, selectionIsRecursive, selected_rows, setProps } = this.props;\r\n    return (\r\n      <TreeList\r\n        id={id}\r\n        dataSource={dataSource}\r\n        keyExpr={keyExpr}\r\n        parentIdExpr={parentIdExpr}\r\n        defaultColumns={columns}\r\n        autoExpandAll={autoExpandAll}\r\n        showBorders={true}\r\n        columnAutoWidth={true}\r\n        wordWrapEnabled={true}\r\n        defaultSelectedRowKeys={default_selected_row_keys}\r\n        default_selected_row_keys={default_selected_row_keys}\r\n        selected_rows={selected_rows}\r\n        onSelectionChanged={(e) => {\r\n          const data = e.component.getSelectedRowsData(selectionMode);\r\n          setProps({ selected_rows: data })\r\n          setProps({default_selected_row_keys: data.map(x=>x[`${keyExpr}`])})\r\n        }}\r\n        onExporting={this.onExporting}\r\n      >\r\n        <Scrolling\r\n          mode=\"standard\" />\r\n        <Paging\r\n          enabled={pagingIsEnabled}\r\n          defaultPageSize={defaultPageSize} />\r\n        <Pager\r\n          showPageSizeSelector={pageSizeSelectorIsEnabled}\r\n          allowedPageSizes={allowedPageSizes}\r\n          showInfo={true} />\r\n        <Sorting mode={sortingMode} />\r\n        <SearchPanel visible={searchPanelIsEnabled}\r\n          width={240}\r\n          placeholder=\"Search...\" />\r\n        <HeaderFilter visible={headerFilterIsEnabled} />\r\n        <FilterRow visible={filterRowIsEnabled} />\r\n        <ColumnChooser enabled={columnChooserIsEnabled} />\r\n        <Selection\r\n          recursive={selectionIsRecursive}\r\n          mode=\"multiple\"\r\n        />\r\n      </TreeList>\r\n    );\r\n  }\r\n}\r\n\r\nList.defaultProps = { autoExpandAll: true, pagingIsEnabled: true, defaultPageSize: 10, pageSizeSelectorIsEnabled: false, sortingMode: \"multiple\", searchPanelIsEnabled: true, headerFilterIsEnabled: true, filterRowIsEnabled: true, columnChooserIsEnabled: false, selectionMode: 'leavesOnly', selectionIsRecursive: true, selected_rows: [], defaultSelectedRowKeys: [], default_selected_row_keys: [] };\r\nList.propTypes = {\r\n  /**\r\n   * The ID used to identify this component in Dash callbacks.\r\n   */\r\n  id: PropTypes.string,\r\n  /**\r\n  * An key,value array of data to be displayed in the datagrid\r\n  */\r\n  dataSource: PropTypes.array.isRequired,\r\n  /**\r\n  * The dataField to be used as index|key.\r\n  */\r\n  keyExpr: PropTypes.string.isRequired,\r\n  /**\r\n  * The dataField to be used as the key to loop on to display the unflattes list.\r\n  */\r\n  parentIdExpr: PropTypes.string.isRequired,\r\n    /**\r\n  * The array of default selected row keys id.\r\n  */\r\n     defaultSelectedRowKeys: PropTypes.array,\r\n  /**\r\n   * Deploys the item hierarchy (true|false)\r\n   */\r\n   /**\r\n  * An array of columns config.\r\n  * Obligatory fields are : dataField (same as the dataSource array key), caption (the displayed column label)\r\n  * Optionally fields are : width (number|auto), dataType (date|)\r\n  * Ex : [{}]\r\n  */\r\n  columns: PropTypes.array,\r\n  /**\r\n   * Enables auto expand the tree\r\n   */\r\n  autoExpandAll: PropTypes.bool,\r\n  /**\r\n   * Enables the paging of results\r\n   */\r\n  pagingIsEnabled: PropTypes.bool,\r\n  /**\r\n   * The number of items by page.\r\n   */\r\n  defaultPageSize: PropTypes.number,\r\n  /**\r\n   * Enables de pages size selector (to choose the numbe rof displayed items by page)\r\n   */\r\n  pageSizeSelectorIsEnabled: PropTypes.bool,\r\n  /**\r\n  * Array of possible page size numbers\r\n  */\r\n  allowedPageSizes: PropTypes.array,\r\n  /**\r\n  * The type of sorting data (multiple|single).\r\n  */\r\n  sortingMode: PropTypes.string,\r\n  /**\r\n  * Displays the search panel above the datagrid (true|false).\r\n  */\r\n  searchPanelIsEnabled: PropTypes.bool,\r\n  /**\r\n   * Displays a filter search icon beside to the coumn label (true|false).\r\n   */\r\n  headerFilterIsEnabled: PropTypes.bool,\r\n  /**\r\n   * Displays a filter search line under each column's label in teh datagrid (true|false).\r\n   */\r\n  filterRowIsEnabled: PropTypes.bool,\r\n  /**\r\n   * Enables dataGrid column chooser widget (true|false).\r\n   */\r\n  columnChooserIsEnabled: PropTypes.bool,\r\n   /**\r\n  * Recursively selects sub-items and parent itemsof a selected irow (true|false)\r\n  */\r\n  selectionIsRecursive: PropTypes.bool,\r\n  /**\r\n  * Configure the perimetre of itme selection (single|all|leavesOnly).\r\n  */\r\n  selectionMode: PropTypes.string,\r\n  /**\r\n  * Array of selected items.\r\n  */\r\n  selected_rows: PropTypes.array,\r\n  /**\r\n  * Array of selected items in UI.\r\n  */\r\n   default_selected_row_keys: PropTypes.array,\r\n  /**\r\n   * Dash-assigned callback that should be called to report property changes\r\n   * to Dash, to make them available for callbacks.\r\n   */\r\n  setProps: PropTypes.func\r\n};"],"sourceRoot":""}